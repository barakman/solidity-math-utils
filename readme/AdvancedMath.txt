This library implements two different methods for solving the equation $x\cdot\big(\frac{a}{b}\big)^x=\frac{c}{d}$:

- Function `solveExact(a, b, c, d)`, which opts for accuracy over performance
- Function `solveQuick(a, b, c, d)`, which opts for performance over accuracy

---

The solution to:

$$x\cdot\big(\frac{a}{b}\big)^x=\frac{c}{d}$$

Can be computed via:

$$x=\frac{W\Big(\log\big(\frac{a}{b}\big)\cdot\frac{c}{d}\Big)}{log\big(\frac{a}{b}\big)}$$

Where $W(z)$ computes a value of $x$ which solves the equation $x\cdot{e}^x=z$.

---

For $z<-1/e$, the value of $W(z)$ is not real.

Respectively, the equation $x\cdot\big(\frac{a}{b}\big)^x=\frac{c}{d}$ has no real solution.

This is because $x\cdot\big(\frac{a}{b}\big)^x\leq\frac{1}{e\cdot\log\big(\frac{b}{a}\big)}<\frac{c}{d}$ for every real value of $x$.

In order to handle the rest of the input domain, we split it into several sections.

---
---

When opting for accuracy, we split the input domain $z=\log\big(\frac{a}{b}\big)\cdot\frac{c}{d}$ into:

$$\underbrace{-1/e\ldots0}\bigg|\underbrace{0\ldots\infty}$$

---

For $-1/e\leq{z}<0$, we approximate $W(z)$ via the Newton-Raphson converging sequence:

$$\large\begin{cases}y_0=-z\\y_{n+1}=\frac{y_n^2+e^{y_n}\cdot{z}}{y_n+1}\end{cases}$$

---

For $0\leq{z}<\infty$, we approximate $W(z)$ via the Newton-Raphson converging sequence:

$$\large\begin{cases}y_0=\small\begin{cases}z&z<1\\\log(z)&z\geq1\end{cases}\\y_{n+1}=\frac{y_n^2\cdot{e}^{y_n}+z}{(y_n+1)\cdot{e}^{y_n}}\end{cases}$$

---
---

When opting for performance, we split the input domain $z=\log\big(\frac{a}{b}\big)\cdot\frac{c}{d}$ into:

$$\underbrace{-1/e\ldots0}\bigg|\underbrace{0\ldots1/e}\bigg|\underbrace{1/e\ldots24+1/e}\bigg|\underbrace{24+1/e\ldots\infty}$$

---

For $-1/e\leq{z}\leq+1/e$, you may observe that $x=\frac{W\Big(\log\big(\frac{a}{b}\big)\cdot\frac{c}{d}\Big)}{log\big(\frac{a}{b}\big)}=\frac{c}{d}\cdot\sum\limits_{n=1}^{\infty}\frac{(-n)^{n-1}}{n!}\cdot\Big(\log\big(\frac{a}{b}\big)\cdot\frac{c}{d}\Big)^{n-1}$:

- For $-1/e\leq{z}\leq0$, which implies that ${a}\leq{b}$, we compute $x=\frac{c}{d}\cdot\sum\limits_{n=1}^{\infty}\frac{(+n)^{n-1}}{n!}\cdot\Big(\log\big(\frac{b}{a}\big)\cdot\frac{c}{d}\Big)^{n-1}$
- For $0\leq{z}\leq+1/e$, which implies that ${a}\geq{b}$, we compute $x=\frac{c}{d}\cdot\sum\limits_{n=1}^{\infty}\frac{(-n)^{n-1}}{n!}\cdot\Big(\log\big(\frac{a}{b}\big)\cdot\frac{c}{d}\Big)^{n-1}$

As you can see, when $a=b$, both formulas can be reduced to $x=\frac{c}{d}$.

Note that as the value of $z$ approaches $-1/e$, the value of $W(z)$ approaches $-1$ but it never actually reaches there.

The function becomes increasingly steep, making its approximation via the Taylor series above increasingly inaccurate.

Hence for the smallest $\%1$ of the range $-1/e\leq{z}\leq0$:

- We precalculate a lookup table which maps $16$ uniformly distributed values of $z$ to values of $W(z)$
- During runtime, we calculate $W(z')$ as the weighted-average of $W(z_0)$ and $W(z_1)$, where $z_0\leq{z'}<z_1$

---

For $1/e<z<24+1/e$:

- We precalculate a lookup table which maps $128$ uniformly distributed values of $z$ to values of $W(z)$
- During runtime, we calculate $W(z')$ as the weighted-average of $W(z_0)$ and $W(z_1)$, where $z_0\leq{z'}<z_1$

---

For $z\geq24+1/e$, we rely on the fact that $W(z)\approx{p-q+\frac{q^2+2pq-2q}{2p^2}}$, where $p=\log(z)$ and $q=\log(p)$.

Since this method requires the calculation of $\log(log(z))$, it is actually applicable for as low as $z=e$.

However, a higher starting value ($z=24+1/e$) is used here in order to achieve higher accuracy.